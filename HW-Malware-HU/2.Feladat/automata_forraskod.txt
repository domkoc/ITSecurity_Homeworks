package hu.aut.bme.javajdclidecomp;

import java.io.*;
import java.util.Scanner;
import java.util.zip.InflaterInputStream;
import jakarta.xml.bind.DatatypeConverter;

public class Main {

    //Futás közben használt fájlok mappája (Fontos, hogy ez a mappa létezzen):
    private static String outputDir = "C:/Users/kocka/Desktop/IT_Security/HW-Malware-HU/2.Feladat/runtimeoutput";

    //jd-cli elérési útvonala:
    private static String jdcliPath = "C:/Users/kocka/Desktop/IT_Security/HW-Malware-HU/2.Feladat/jd-cli.jar";

    public static void main(String[] paramArrayOfString) throws Exception {
        //az alap jar kicsomagolása és a fájl megnyitása:
        int classIndex = 1;
        decompile("C:/Users/kocka/Desktop/IT_Security/HW-Malware-HU/files/matrijava.jar", "C:/Users/kocka/Desktop/IT_Security/HW-Malware-HU/2.Feladat/output");
        StringBuilder stringBuilder = stringBuilderFromFile(new File("C:/Users/kocka/Desktop/IT_Security/HW-Malware-HU/2.Feladat/output/matrijava/matrijava/Class1.java"));
        classIndex++;

        //Osztályok egyesével való, fálba írása, dekompilálása és dekompiláltból a kiolvasás:
        while (stringBuilder.length() != 0) {
            writeToFile(classIndex, stringBuilder.toString());
            decompile(outputDir + "/class" + classIndex + ".class", outputDir);
            stringBuilder = stringBuilderFromFile(new File(outputDir + "/class" + classIndex + ".java"));
            classIndex++;
        }

        //Az utolsó kicsomagolt fájl tartalmának kiírása:
        File endCode = new File(outputDir + "/class" + (classIndex-1) + ".java");
        Scanner endCodeScanner = new Scanner(endCode);
        while (endCodeScanner.hasNextLine()) {
            String line = endCodeScanner.nextLine();
            System.out.println(line);
        }
        endCodeScanner.close();

    }

    //Egy stringbuilder összerakása a paraméterként kapott fájlból, csak a stringbuildert alkalmazó sorokból:
    private static StringBuilder stringBuilderFromFile(File file) throws FileNotFoundException {
        Scanner fileScanner = new Scanner(file);
        StringBuilder stringBuilder = new StringBuilder();
        while (fileScanner.hasNextLine()) {
            String line = fileScanner.nextLine();
            line = line.strip();
            if (line.startsWith("stringBuilder.append")) {
                stringBuilder.append(line.substring(22, line.length()-3));
            }
        }
        fileScanner.close();
        return stringBuilder;
    }


    //Az eredeti transzformációk meghagyva:
    public static void pipe(InputStream paramInputStream, OutputStream paramOutputStream) throws Exception {
        byte[] arrayOfByte = new byte[1024];
        int i;
        while ((i = paramInputStream.read(arrayOfByte)) > 0)
            paramOutputStream.write(arrayOfByte, 0, i);
    }

    //Az eredeti transzformációk meghagyva:
    public static byte[] unzip(byte[] paramArrayOfbyte) throws Exception {
        InflaterInputStream inflaterInputStream = new InflaterInputStream(new ByteArrayInputStream(paramArrayOfbyte));
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        pipe(inflaterInputStream, byteArrayOutputStream);
        return byteArrayOutputStream.toByteArray();
    }

    //paraméterként kapott byte code fájlba írása, az eredeti transzformációk végrehajtásával:
    public static void writeToFile(int classIndex, String classCoseAsString) throws Exception {
        byte[] arrayOfByte = unzip(DatatypeConverter.parseBase64Binary(classCoseAsString));

        String outputFilePath = outputDir + "/class" + classIndex + ".class";
        File outputFile = new File(outputFilePath);

        try (FileOutputStream outputStream = new FileOutputStream(outputFile)) {
            outputStream.write(arrayOfByte);
        }
    }

    //dekompilálás a jd-cli segítségével:
    public static boolean decompile(String filePath, String outDirPath) throws IOException {
        //Létezik-e a fájl:
        File f = new File(filePath);
        if(!f.exists()) {
            return false;
        }
        //parancs összerakása és futtatása:
        Process process = Runtime.getRuntime().exec("java -jar \"" + jdcliPath + "\" -od \"" + outDirPath + "\" " + filePath);
        //kimenet továbbirányítása a standard kimenetre:
        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
        String line = "";
        while ((line = reader.readLine()) != null) {
            System.out.println(line);
        }
        return true;
    }
}
